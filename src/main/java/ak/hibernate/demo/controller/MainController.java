package ak.hibernate.demo.controller;
import ak.hibernate.demo.User;
import ak.hibernate.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import javax.jws.WebParam;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping("")
    public String home (ModelMap modelMap){
        modelMap.put("users", userRepository.findAll());
        return "index";
    }

    @PostMapping(path="/add") // Map ONLY GET Requests
    public String addNewUser (@RequestParam String name
            , @RequestParam String email, ModelMap modelMap) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User(name, email);
        userRepository.save(n);
        modelMap.put("users", userRepository.findAll());
        return "redirect:/demo";
    }
    @GetMapping(path = "/find")
    public String findUser(@RequestParam String name, ModelMap modelMap){
        modelMap.put("users", userRepository.findByName(userRepository.findAll(), name));
        return "index";
    }

    @PostMapping(path="/addComment/{id}")
    public String addComment (@RequestParam String comment, @PathVariable int id, ModelMap modelMap){
        User a = userRepository.findById(id).get();
        a.setComment(comment);
        userRepository.save(a);
        modelMap.put("users", userRepository.findAll());
        return "index";
    }
    @GetMapping(path="/deleteComment/{id}")
    public String addComment (@PathVariable int id, ModelMap modelMap){
        User a = userRepository.findById(id).get();
        a.setComment("");
        userRepository.save(a);
        modelMap.put("users", userRepository.findAll());
        return "index";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}